import heapq
class PuzzleState:
    def __init__(self, board, parent=None, move="", depth=0, cost=0):
        self.board = board
        self.parent = parent
        self.move = move
        self.depth = depth
        self.cost = cost
        self.priority = cost + self.heuristic()
    def heuristic(self):
        """Calculate Manhattan distance heuristic."""
        distance = 0
        for i in range(3):
            for j in range(3):
                value = self.board[i][j]
                if value != 0:
                    target_x = (value - 1) // 3
                    target_y = (value - 1) % 3
                    distance += abs(i - target_x) + abs(j - target_y)
        return distance

    def get_neighbors(self):
        """Generate neighbor states."""
        neighbors = []
        x, y = [(i, row.index(0)) for i, row in enumerate(self.board) if 0 in row][0]
        directions = {'Up': (-1, 0), 'Down': (1, 0), 'Left': (0, -1), 'Right': (0, 1)}

        for move, (dx, dy) in directions.items():
            nx, ny = x + dx, y + dy
            if 0 <= nx < 3 and 0 <= ny < 3:
                new_board = [row[:] for row in self.board]
                new_board[x][y], new_board[nx][ny] = new_board[nx][ny], new_board[x][y]
                neighbors.append(PuzzleState(new_board, self, move, self.depth + 1, self.depth + 1))
        return neighbors

    def is_goal(self):
        return self.board == [[1,2,3],[4,5,6],[7,8,0]]

    def __lt__(self, other):
        return self.priority < other.priority

    def __eq__(self, other):
        return self.board == other.board

    def __hash__(self):
        return hash(str(self.board))


def a_star(start_board):
    start_state = PuzzleState(start_board)
    frontier = []
    heapq.heappush(frontier, start_state)
    explored = set()

    while frontier:
        current_state = heapq.heappop(frontier)

        if current_state.is_goal():
            return reconstruct_path(current_state)

        explored.add(hash(current_state))

        for neighbor in current_state.get_neighbors():
            if hash(neighbor) not in explored:
                heapq.heappush(frontier, neighbor)

    return None


def reconstruct_path(state):
    path = []
    boards = []
    while state:
        path.append(state.move)
        boards.append(state.board)
        state = state.parent
    path.reverse()
    boards.reverse()
    return path[1:], boards[1:], len(path) - 1  # Exclude initial blank move


def print_board(board):
    for row in board:
        print(" ".join(str(num) if num != 0 else ' ' for num in row))
    print()


# Example Usage
if __name__ == "__main__":
    start = [
        [1, 2, 3],
        [4, 0, 6],
        [7, 5, 8]
    ]
    moves, steps, cost = a_star(start)

    if moves:
        print("Solution found!")
        print("Total cost (number of moves):", cost)
        print("Steps and board states:\n")

        for i, (move, board) in enumerate(zip(moves, steps), 1):
            print(f"Step {i}: Move {move}")
            print_board(board)
    else:
        print("No solution found.")
