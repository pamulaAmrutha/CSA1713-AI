N = 8

def print_solution(board):
    for row in board:
        print(" ".join("Q" if col else "." for col in row))
    print()

def is_safe(board, row, col):
    for i in range(row):
        if board[i][col] or \
           (col - (row - i) >= 0 and board[i][col - (row - i)]) or \
           (col + (row - i) < N and board[i][col + (row - i)]):
            return False
    return True

def solve_n_queens(board, row):
    if row == N:
        print("One valid 8-Queens solution:\n")
        print_solution(board)
        return True

    for col in range(N):
        if is_safe(board, row, col):
            board[row][col] = 1
            if solve_n_queens(board, row + 1):
                return True  # Stop after first solution
            board[row][col] = 0  # Backtrack
    return False

def solve():
    board = [[0] * N for _ in range(N)]
    if not solve_n_queens(board, 0):
        print("No solution exists.")

if __name__ == "__main__":
    solve()
